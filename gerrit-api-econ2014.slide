Extending Gerrit
A look at the Gerrit Plugin API

Shawn Pearce
Google
sop@google.com

Ian Bull
EclipseSource
irbull@eclipsesource.com

* Gerrit Code Review

- *Web*based* code-review system for projects using *Git*
- Makes reviews easier through a *side-by-side* comparison view and inline *comments*

.image images/sidebyside.png 338 726

- Simplifies project management by allowing authorized users to submit changes to the master branch

* Gerrit in the wild
- Android
- Eclipse
- LibreOffice
- Wikimedia
- Chromium OS

Gerrit uses JGit to interface with Git

- JGit is an implementation of Git written entirely in Java
- [[http://eclipse.org/jgit]]

* A Tale of Two Systems
- Eclipse uses Bugzilla to plan, *discuss*, *design* and *track* work items
- Eclipse uses Gerrit to review, *discuss*, *design* and *track* patch-sets
- Discussion is fragmented between these two systems


Let's build a Gerrit extension to possibly integrate these two systems:

- Create an initial patch sets from a bug number with a reference to the bug
- Extend this idea to create a _simple_ issue tracking system with Gerrit

* Plugins and Extensions
- Functionality can be *extended* by installing *plugins* and *extensions*
- Plugins are tightly coupled with full access to all internals
- Extensions have *limited* *visibility* to internals, *compatible* across a wider range of versions

*Two*APIs*

- gerrit-extension-api.jar
- gerrit-plugin-api.jar

 Tip: When building Gerrit from master, install the API library in your local repository.
  % buck build api
  % buck build api_install

#* Tools for Building Plugins
#Maven
#Buck
#- Install the API library into your local maven repository
# buck build api
# buck build api_install
#Eclipse
#
#- Eclipse project setup tool
# tools/eclipse/project.py
#Plugins directory is scanned and loaded (hot deploy)

* Anatomy of a Plugin

.image images/gerrit-plugin-anatomy.png 500 800

* Classpath

- Each plugin is loaded into its own ClassLoader
- Plugin inherits the Java Runtime and Gerrit API
- Plugins are loaded from a single JAR
- Dependencies must be included or placed in server's `libs/` directory

* Manifest
Manifest describes the content of the plugin

- *API*Type* must be specified (plugin or extension)
- If modules are explicitly registered, they must be specified
- Maven and Buck based builds will generate the Manifest for you
 Manifest-Version: 1.0

 Implementation-Vendor: Gerrit Code Review
 Implementation-Title: plugin tutorial-plugin
 Implementation-Version: 1.0-SNAPSHOT
 Implementation-URL: http://code.google.com/p/gerrit/

 Gerrit-ApiType: plugin
 Gerrit-ApiVersion: 2.9-SNAPSHOT
 Gerrit-PluginName: tutorialPlugin

 Gerrit-Module: com.googlesource.gerrit.plugins.tutorialplugin.Module
 Gerrit-HttpModule: com.googlesource.gerrit.plugins.tutorialplugin.HttpModule
 Gerrit-SshModule: com.googlesource.gerrit.plugins.tutorialplugin.SshModule

* Explicit Registration
Up to three modules can be registered in the manifest

- *Gerrit-Module*: Supplies bindings to the core server
- *Gerrit-SshModule*: Supplies SSH commands to the SSH server
- *Gerrit-HttpModule*: Supplies servlets and filters to the HTTP Server


* Extensions
Supports a limited number of integration points

- Limited interaction with Projects
- Limited interaction with Reviews (changes)
- Event listening
- Rest API
- System status
- Basic UI integration (top level menu, message of the day)

* Your First Gerrit Extension
- Use a Gerrit-Module to register the API
- Create an instance of MessageOfTheDay

 class Module extends AbstractModule {
   protected void configure() {
     DynamicSet.bind(binder(), MessageOfTheDay.class).to(EclipseConMessage.class);
   }
 }

 public class EclipseConMessage extends MessageOfTheDay {
  @Inject
  public EclipseConMessage(@PluginName String pluginName) {
    this.pluginName = pluginName;
  }
  public String getHtmlMessage() {
    StringBuilder result = new StringBuilder();
    result.append("<H1>Welcome to EclipseCon 2014</H1>");
    Date startTime = new Date(ManagementFactory.getRuntimeMXBean().getStartTime());
    String prettyPrintedTime = new PrettyTime(new Date()).format(startTime);
    result.append(pluginName + " says the server was started " + prettyPrintedTime + "<br>");
    return result.toString();
  }
 }

* Deploy the Plug-in
- Track problems by watching the logs in <gerrit_install>/logs directory
- Copy the plugin to the <gerrit_install>/plugins directory
- Copy the required libraries to the <gerrit_install>/libs directory
- Deployed at [[http://localhost:7070/]]
.image images/deploy0.png

- Use `ssh`gerrit`plugin`install`-n`plugin`-`<target/plugin.jar`

* Guice Dependency Injection
Gerrit uses Guice dependency injection
Most API types are accepted as parameters to your constructors

- `@PluginName`String` - name of the plugin
- `@CanonicalWebUrl`String` - server URL
- `ReviewDB` - connection to the Gerrit database ORM
- `GitRepositoryManager` - local Git repositories managed by Gerrit
- `IdentifiedUser` - currently authenticated user

 public class CreateWorkItemImpl {
  @Inject
  CreateWorkItemImpl(ReviewDb db,
      GitRepositoryManager repoManager,
      ... ) {
    this.db = db;
    this.repoManager = repoManager
  }
 }

* Capabilities
Plugins may provide their own capabilities and restrict use of commands to users who are granted those capabilities

 public class CreateWorkItemCapability extends CapabilityDefinition {
  @Override
  public String getDescription() {
    return "Can create a work item in Gerrit";
  }
 }

Capabilities are bound like other other services

 class Module extends AbstractModule {
  protected void configure() {
    bind(CapabilityDefinition.class)
      .annotatedWith(Exports.named("createWorkItem"))
      .to(CreateWorkItemCapability.class);
  }
 }

* SSH Commands
- @CommandMetaData can be used to register the command
- @Argument can be used to register arguments

 @RequiresCapability("createWorkItem")
 @CommandMetaData(name = "createChange", description = "Creates a new change")
 public class CreateChange extends SshCommand {
   @Argument(usage = "projectname", index = 0)
   private String projectName;

   @Argument(usage = "bugnumber", index = 1)
   private String bugNumber;

   protected void run() {
     try {
       .. <Validate arguments> ..
       lookupBuzillaEntry( bugNumber );
       Change workItem = createWork.createGerritWorkItem(projectName, summary, description);
       stdout.println("Work item created at: " + canonicalWebUrl + workItem.getChangeId());
     } catch (Exception e) {
       throw die("cannot create work item");
     }
   }

* SSH Commands
Plugins can provide commands that can be access via SSH

- Register the command
 class SshModule extends PluginCommandModule {
   @Override
   protected void configureCommands() {
     command(PrintUptime.class);
     command(CreateChange.class);
   }
 }

.image images/ssh-cmd.png 250 950

* HTTP Modules
Plugins can register HTTP extensions

- Servlets
- Javascript extensions
- GWT (web UI) extensions

 class HttpModule extends ServletModule {
   @Override
   protected void configureServlets() {
     serve("/projects/*").with(ProjectListServlet.class);

     DynamicSet.bind(binder(), WebUiPlugin.class)
       .toInstance(new JavaScriptPlugin("create-item.js"));

     DynamicSet.bind(binder(), WebUiPlugin.class)
       .toInstance(new GwtPlugin("tutorialplugin"));
   }
 }

* REST API Extension

Plugins can register REST API handlers:

  install(new RestApiModule() {
    @Override
    protected void configure() {
      post(PROJECT_KIND, "create-item").to(CreateWorkItemAction.class);
    }
  });

responds to

  POST /projects/example-app/exPlugin~create-item HTTP/1.1
  ...

* UI Extension
Plugins can contribute UI extensions to core Gerrit pages:

- Change screen
- Project info screen
- Top menu extension
- Add your own screen

* JS UI Extension
Adds a "Create Work Item" action to the Projects page

- create-item.js Supplies the UI Code for the action
 Gerrit.install(function(self) {
    function onCreateWorkItem(c) {
      var f = c.textfield();
      var b = c.button('Create', {onclick: function(){
        c.call(
          {bugnumber: f.value},
          function(r) {
            c.hide();
            window.location.href=r;
          });
      }});
      c.popup(c.div(
        c.prependLabel('Eclipse Bug Number: ', f),
        c.br(),
        b));
      f.focus();
    }
    self.onAction('project', 'create-item', onCreateWorkItem);
  });

* UI Extension
UiAction and RestModifyView provide the server side integration

 @RequiresCapability("createWorkItem")
 class CreateWorkItemAction implements UiAction<ProjectResource>,
    RestModifyView<ProjectResource, CreateWorkItemAction.Input> {

  public String apply(ProjectResource pr, Input input) {
    lookupBuzillaEntry(input);
    Change change = createWorkItem.createGerritWorkItem(pr.getName(), summary, description);
    return canonicalWebUrl + change.getChangeId();
  }

  public Description getDescription(ProjectResource resource) {
    return new Description().setLabel("Create work item")
        .setTitle("Create work item on " + resource.getName())
        .setVisible(user.get() instanceof IdentifiedUser);
  }
 }

#.image images/projects-action.png 150 500
[[http://localhost:7070/#/admin/projects/example-app]]

* GWT Extensions
UI Extensions can be written in GWT

 DynamicSet.bind(binder(), WebUiPlugin.class)
    .toInstance(new GwtPlugin("tutorialplugin"));

Extend PluginEntryPoint and register your own screen

 public class TutorialPlugin extends PluginEntryPoint {
   @Override
   public void onPluginLoad() {
     Plugin.get().screen("", new IndexScreen.Factory());
   }
 }

Available at [[http://localhost:7070/#/x/tutorialPlugin/][http://localhost:7070/#/x/<pluginName>/<path>]]

* Events and Notifications
Certain operations in Gerrit trigger events

- *ChangeListener*: Listen to change events
- *LifecycleListener*: Plugin start / stop
- *NewProjectCreatedListener*: Project creation
- *ProjectDeletedListener*: Project deletion
- *HeadUpdatedListener*: Update HEAD on a project

 DynamicSet.bind(binder(), ChangeListener.class).to(MyChangeListener.class);

* ChangeListener

Notify bugzilla whenever the Merge happens

 public class MyChangeListener implements ChangeListener {

  private static final String HTTPS_BUGS_ECLIPSE_ORG_0_9 = "(.*)https?://bugs.eclipse.org/[0-9]+/?(.*)";

  @Override
  public void onChangeEvent(ChangeEvent changeEvent) {
    if ( changeEvent instanceof ChangeMergedEvent )  {
      ChangeMergedEvent mergeEvent = ((ChangeMergedEvent) changeEvent);
      ChangeAttribute change = mergeEvent.change;
      String commitMessage = change.commitMessage;
      if ( containsBugzillaReference(commitMessage)) {
        notifyBugzilla(change);
      }
    }
  }

* Developer Tips
Python script to create an Eclipse project for the Gerrit source

 tools/eclipse/project.py

Launch configurations for both the Gerrit Daemon and the GWT Debug

- Point to an existing Gerrit application directory

.image images/launch-config.png 300 750
